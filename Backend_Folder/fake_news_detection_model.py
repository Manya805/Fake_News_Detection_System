# -*- coding: utf-8 -*-
"""Fake_news_Detection_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1phsXMeVUYyqbJvQNJPdvSSyZHZrwz7zR
"""

# Install necessary libraries (make sure to run this in your environment)
!pip install transformers torch requests lxml_html_clean newspaper3k pandas

# Import required libraries
import requests
from newspaper import Article
from transformers import pipeline
import pandas as pd

import requests
from newspaper import Article
from transformers import pipeline
import pandas as pd

# Initialize Zero-shot Classification Model
classifier = pipeline('zero-shot-classification', model='facebook/bart-large-mnli')

API_KEY = "AIzaSyCrJzQ3Io7ji7xW_ermckT20XByvTlb63k"

# Google Fact Check API integration
def fact_check_query(query):
    url = f"https://factchecktools.googleapis.com/v1alpha1/claims:search?query={query}&key={API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if "claims" in data:
            return data["claims"]
    return None

# Web scraping for live news articles (Optional)
def scrape_article(url):
    try:
        article = Article(url)
        article.download()
        article.parse()
        return article.text
    except Exception as e:
        print(f"Error scraping {url}: {e}")
        return None

# Classification based on threshold values
def classify_news(true_score, threshold=0.75):
    if true_score >= threshold:
        return "True News ✅"
    elif true_score < (1 - threshold):
        return "False News ❌"
    else:
        return "Uncertain / Needs Verification ⚠️"

# Format Fact Check Results
def format_fact_check_results(fact_check_results):
    formatted_results = ""
    for result in fact_check_results:
        claim_text = result['text']
        claim_review = result['claimReview'][0]  # Get the first review entry

        review_date = claim_review.get('reviewDate', 'N/A')
        textual_rating = claim_review.get('textualRating', 'N/A')
        review_title = claim_review.get('title', 'N/A')
        review_url = claim_review.get('url', 'N/A')
        publisher_name = claim_review['publisher'].get('name', 'N/A')

        formatted_results += f"""
        ----------------------------------------
        Claim: {claim_text}
        Fact Check Status: {textual_rating}
        Reviewed by: {publisher_name}
        Review Date: {review_date}
        Review Title: {review_title}
        Fact Check URL: {review_url}
        ----------------------------------------
        """
    return formatted_results

# Main Fact Check Pipeline
def fact_check_pipeline(query):
    # Step 1: Try Google Fact Check API
    api_result = fact_check_query(query)
    if api_result:
        # Format and display fact check results
        formatted_results = format_fact_check_results(api_result)
        # Check the textual rating for the claim and display the news status
        for result in api_result:
            claim_review = result['claimReview'][0]  # Get the first review entry
            textual_rating = claim_review.get('textualRating', 'N/A')

            # Determine whether the news is true or false
            if textual_rating == 'True':
                return f"News is True ✅\n{formatted_results}"
            elif textual_rating == 'False':
                return f"News is False ❌\n{formatted_results}"
            else:
                return f"News is Uncertain / Needs Verification ⚠️\n{formatted_results}"

    # Step 2: Classify using ML model if no API result
    print("\nClassifying the fact using the AI model...")
    classification_result = classifier(query, candidate_labels=["True", "False"])

    # Extract True and False probabilities
    true_score = classification_result["scores"][classification_result["labels"].index("True")]

    # Classify based on threshold
    classification = classify_news(true_score)

    # Step 3: If uncertain, suggest further verification
    if classification == "Uncertain / Needs Verification ⚠️":
        return f"{classification} - Needs verification from trusted sources"

    return classification

# Example query for fact-checking
query = input("Enter a news headline to check: ")
result = fact_check_pipeline(query)
print(result)